(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{526:function(t,e,a){"use strict";a.r(e);var n=a(34),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"run-a-local-testnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-a-local-testnet"}},[t._v("#")]),t._v(" Run a local Testnet")]),t._v(" "),a("h2",{attrs:{id:"build-the-node-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-the-node-server"}},[t._v("#")]),t._v(" Build the node server")]),t._v(" "),a("p",[t._v("Before you start your journey as an IoTeX developer, you need a IoTeX "),a("a",{attrs:{href:"/introduction/node-concept"}},[t._v("Gateway node")]),t._v(" to serve as an "),a("strong",[t._v("endpoint")]),t._v(", that you can use to interact with the blockchain. While IoTeX provides official gateway nodes both to interact with "),a("a",{attrs:{href:""}},[t._v("Mainnet")]),t._v(" and "),a("a",{attrs:{href:""}},[t._v("Testenet")]),t._v(", in this guide we will configure our own local Testnet, that will also include pre-generated accounts with some balance to start with.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("To configure a single-node blockchain locally on your computer, you will need git and golang installed: find "),a("a",{attrs:{href:"https://github.com/iotexproject/iotex-core#iotex-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("more isnstructions on GitHub"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("Clone and build the IoTeX Full-Node code (iotex-core)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone https://github.com/iotexproject/iotex-core.git\ncd iotex-core\nmake\n")])])]),a("h2",{attrs:{id:"add-a-test-account-with-initial-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-a-test-account-with-initial-balance"}},[t._v("#")]),t._v(" Add a test account with initial balance")]),t._v(" "),a("p",[t._v("Now that the node executable is built in the .bin/ directory, the last step is to add an initial test account preloaded with IOTX tokens. We will use our "),a("a",{attrs:{href:"ioctl-create-account"}},[t._v("dev-acc")]),t._v(" account:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ ioctl account list\n\nio1a8r9fvu6e3vthfaqvnxlhc6eavsm6t8a2cwtud - dev-acc\n")])])]),a("p",[t._v("edit the genesis file "),a("code",[t._v("./config/standalone-genesis.yaml")]),t._v(" and add this account to the "),a("code",[t._v("initBalances")]),t._v(" section:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("initBalances")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# overwrite with your test address")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("io1a8r9fvu6e3vthfaqvnxlhc6eavsm6t8a2cwtud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100000000000000000000000000000000000"')]),t._v("\n")])])]),a("p",[t._v("we can now start our testnet using "),a("em",[t._v("STANDALONE")]),t._v(" mode to simulate a full blockchain in a single node")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("make run\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);