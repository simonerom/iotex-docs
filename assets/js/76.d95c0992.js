(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{572:function(t,e,a){"use strict";a.r(e);var n=a(34),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"iotex-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iotex-actions"}},[t._v("#")]),t._v(" IoTeX Actions")]),t._v(" "),a("p",[t._v("Any blockchain is bootstrap from an initial ("),a("em",[t._v("genesis")]),t._v(") state, which is then changed over time through transactions, or "),a("strong",[t._v("Actions")]),t._v(" as they are called in IoTeX. An action is fundamentally a "),a("em",[t._v("packet of data")]),t._v(", signed by a blockchain account, that instructs the blockchain to make some type of change to the distributed ledger. The action can be sent to any blockchain node acting as a gateway, that in turn broadcasts it to the entire network of nodes for verification and, eventually it get applied and stored forever in the Ledger.")]),t._v(" "),a("p",[t._v("In IoTeX there are different types of Actions, depending on the type of operation that is required to perform:")]),t._v(" "),a("h2",{attrs:{id:"transfer-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-action"}},[t._v("#")]),t._v(" Transfer Action")]),t._v(" "),a("p",[t._v("A transfer is an action initiated by an account, intended to "),a("em",[t._v("transfer")]),t._v(" a certain amount of IOTX tokens owned by that account ("),a("em",[t._v("sender")]),t._v(") into another account ("),a("em",[t._v("recipient")]),t._v(").")]),t._v(" "),a("h2",{attrs:{id:"execution-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution-action"}},[t._v("#")]),t._v(" Execution Action")]),t._v(" "),a("p",[t._v("An execution is an action initiated by an account, intended to run the code associated with a smart contract account")]),t._v(" "),a("h2",{attrs:{id:"governance-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#governance-actions"}},[t._v("#")]),t._v(" Governance Actions")]),t._v(" "),a("p",[t._v("Governance actions are low level actions between an account and the blockchain itself, intended to manage the voting mechanism, delegate registrations and rewards.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("GrantReward")]),t._v(" is the action initiated by the blockchain, to grant either block or epoch reward to a delegate")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ClaimFromRewardingFund")]),t._v(" is the action initiated by an account to claim delegate reward from the granted rewards fund")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("DepositToRewardingFund")]),t._v(" is the action initiated by the blockchain to deposit a delegate reward to the rewarding fund")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("CandidateRegister")]),t._v(" is the action to register a candidate")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("CandidateUpdate")]),t._v(" is the action to update a candidate data")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("CreateStake")]),t._v(" defines the action of stake creation")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Restake")]),t._v(" defines the action of stake again with different options")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("DepositToStake")]),t._v(" defines the action of stake add deposit")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("TransferStake")]),t._v(" defines the action of transfering stake ownership to another account")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Unstake")]),t._v(" defines the action of unstake")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("WithdrawStake")]),t._v(" defines the action of stake withdraw")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);